Revision Control & File Sharing:
  git - version control system
  GitHub - Code sharing and collaboration platform

Text Editors:
  Atom - Simple text editor created by GitHub
    Note: like a reimagined emacs, not a rich text editor like word
  Brackets -
  Sublime -
  Vim -
  Emacs -
  Notepad++ -

Purpose:
	Learning how to use GIT which has two versions:
    Git BASH (Linux Style Command Line) and
    Git GUI (Windows Style Graphical User Interface)
	Also learning to use GITHUB which has two versions:
    Git Shell (Command Line) and
    GitHub (Graphical User Interface)

	Note: GIT seems to allow for more Linux based commands while GITHUB seems to allow for more windows based commands

Git Features:
  Online/Offline
    Can be used online/offline.
  Version Control
    Commit - one version of the file
      Saves the current file as a new version
    	New document versions are saved manually
    	Creating a new document versions is referred to as a commit
    	Commits should be commented to explain what was changed in the new version
    	One Commit Per Logical Change:
      	The amount of changes between commits should not be to large (i.e. hard to keep track of all the changes)
      	New commits should be easy to follow and understand what has changed.
      	The commit message should explain the single logical change that was made
      The number of commits can be very large
      Each commit will have a Commit ID, Author, Date, and Comments
      Example Commit ID: b0678b161fcf74467ed3a63110557e3d6229cfa6
    Repository - Tracking across multiple files
    	All files in the repository are saved when a commit is made for any one of them
      Location: The git repository is stored in the .git directory
        (dot files/folders are often hidden by the operating system)

  3 Main Sections of git
    Working Directory - A single checkout of one version of the project

    Staging Area


    .git directory

Git Commands:
    git log
        Example: git log
          returns a list of all the commits with their Commit ID, Author, Date, and Comments
        Example 2: git log --graph --oneline <branch1> <branch2>
          Add vertical lines showing the branching paths
        Example 3: git log -n 1
          -n stands for number of commits to be shown, in this case 1.
        Note 1: Press q to quit
        Note 2: "log" will only show commits prior to the current HEAD

    git diff <commit_id_older> <commit_id_newer>
        Example 1: git diff <commit_id_older> <commit_id_newer>
          Shows differences between 2 versions  (commits) of a file
        Example 2: git diff
          Compares the files in the "working directory" with the files in the "staging area"
        Example 3: git diff --staged
          Compares the files in the "staging area" with the head of  the commits
          Note: --staged = --cached
        Note: For colored diff, git config --global color.ui auto

    git clone - makes a copy of a repository
         Example: git clone https://github.com/udacity/asteroids.git

    git checkout - Converts all files to the state they were in
         during the chosen commit.  Think of it as checking out a specific version of the files
         Example 1: git checkout b0678b161fcf74467ed3a63110557e3d6229cfa6
         Note 1: Whichever commit you checkout becomes the new HEAD
         Note 2: "log" will only show commits prior to the current HEAD
         Example 2: git checkout <branch_name>
          Makes the current branch the head
        Example 3: git checkout -b <new_branch_name>
          Creates a new branch and checks it out.  Equivalent  to the following 2 commands:
            git branch <new_branch_name>
            git checkout <new_branch_name>

    git init - Initialize (Create) a new repository
      The directory that you run git init in becomes the home directory for that repository.
      The .git directory will be created in the directory where git init is ran

    git status - Returns  the status of the git repository
      Provide info on branch status, commit status, files tracked/untracked

    git add <filename> - add file or files to the staging area so they can be added at the next commit
      Example: git add index.c
      Example: git add *.c
    git add <directory> - recursively adds all the files in the directory
      Example: git add css

    git branch - commits are allowed to progess down different labels.
        These labels are called branches.
      Example 1: git branch
        Returns all the available branches.
      Example 2: git branch <new_branch_name>
        Creates a new branch

    git show <commit_id>
      Shows the diff between a commit and its parent.  Useful when two branches have been merged and there are commits from the other branch in between the commit and its parent.

    git merge checked_out_branch_name branch_name_to_be_merged_in
      Merges a branch with the currently checked out branch
      Note 1: if the checked out branch is the master then the other branched will be merged into the master (becoming part of the master).
      Note 2: If the checked out branch was an experimental branch and the other branch was the master then the master will be merged into the experimental branch.  (Keeping the experimental branch up to date with changes in the master, but the master will still not have the experimental changes.)
      
Git Bash Layout/Formatting
